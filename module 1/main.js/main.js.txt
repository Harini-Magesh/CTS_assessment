// JavaScript Learning Track

// ==============================
// Exercise 1: JavaScript Basics & Setup
// ==============================
console.log("Welcome to the Community Portal");

window.onload = function () {
  alert("Page fully loaded!");
};


// ==============================
// Exercise 2: Syntax, Data Types, and Operators
// ==============================
const eventName = "Music Fest";
const eventDate = "2025-06-15";
let availableSeats = 100;

console.log(`Event: ${eventName}, Date: ${eventDate}, Seats: ${availableSeats}`);
availableSeats--;
console.log(`Seats left: ${availableSeats}`);


// ==============================
// Exercise 3: Conditionals, Loops, and Error Handling
// ==============================
const events = [
  { name: "Tech Talk", date: "2025-07-10", seats: 10 },
  { name: "Old Meetup", date: "2024-01-01", seats: 0 },
];

events.forEach(event => {
  const eventDate = new Date(event.date);
  const today = new Date();

  if (eventDate > today && event.seats > 0) {
    console.log(`Upcoming Event: ${event.name}`);
  } else {
    console.log(`Skipping ${event.name}`);
  }
});

function register(event) {
  try {
    if (event.seats > 0) {
      event.seats--;
      console.log("Registration successful");
    } else {
      throw new Error("No seats available");
    }
  } catch (error) {
    console.error(error.message);
  }
}


// ==============================
// Exercise 4: Functions, Scope, Closures, Higher-Order Functions
// ==============================
function addEvent(name, category) {
  return { name, category, seats: 50 };
}

function registerUser(event) {
  if (event.seats > 0) {
    event.seats--;
    console.log(`User registered to ${event.name}`);
  }
}

function filterEventsByCategory(events, category) {
  return events.filter(e => e.category === category);
}

function createCategoryCounter() {
  const counters = {};
  return function (category) {
    counters[category] = (counters[category] || 0) + 1;
    return counters[category];
  };
}

const countRegistration = createCategoryCounter();


// ==============================
// Exercise 5: Objects and Prototypes
// ==============================
function Event(name, category, seats) {
  this.name = name;
  this.category = category;
  this.seats = seats;
}

Event.prototype.checkAvailability = function () {
  return this.seats > 0;
};

const eventObj = new Event("Baking Workshop", "Cooking", 20);
console.log(Object.entries(eventObj));


// ==============================
// Exercise 6: Arrays and Methods
// ==============================
let eventArray = [];
eventArray.push({ name: "Art Show", category: "Art" });

const musicEvents = eventArray.filter(e => e.category === "Music");

const eventCards = eventArray.map(e => `Event: ${e.name}`);
console.log(eventCards);


// ==============================
// Exercise 7: DOM Manipulation
// ==============================
const container = document.querySelector("#event-container");

if (container) {
  eventArray.forEach(e => {
    const card = document.createElement("div");
    card.textContent = `${e.name} - ${e.category}`;
    container.appendChild(card);
  });
}


// ==============================
// Exercise 8: Event Handling
// ==============================
function filterByCategory(category) {
  console.log("Filtering by:", category);
}

document.addEventListener("keydown", (e) => {
  if (e.key === "Enter") {
    console.log("Search triggered");
  }
});


// ==============================
// Exercise 9: Async JS, Promises, Async/Await
// ==============================
// Using .then/.catch
fetch("https://mockapi.io/events")
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error("Failed:", err));

// Using async/await
async function fetchEvents() {
  try {
    document.body.classList.add("loading");
    const res = await fetch("https://mockapi.io/events");
    const data = await res.json();
    console.log(data);
  } finally {
    document.body.classList.remove("loading");
  }
}


// ==============================
// Exercise 10: Modern JavaScript Features
// ==============================
const modernEvent = { name: "Yoga", date: "2025-08-01", seats: 20 };
const { name, date } = modernEvent;
console.log(`${name} on ${date}`);

function createEvent(name = "Untitled", category = "General") {
  return { name, category };
}

const clonedEvents = [...eventArray];


// ==============================
// Exercise 11: Working with Forms
// ==============================
document.getElementById("regForm")?.addEventListener("submit", function (e) {
  e.preventDefault();
  const { username, email, event } = this.elements;
  if (!username.value || !email.value) {
    alert("All fields required");
  } else {
    console.log(`User: ${username.value}, Event: ${event.value}`);
  }
});


// ==============================
// Exercise 12: AJAX & Fetch API
// ==============================
function registerUserToAPI(data) {
  fetch("https://mockapi.io/register", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data)
  })
    .then(res => res.json())
    .then(() => alert("Registered successfully"))
    .catch(() => alert("Registration failed"));

  setTimeout(() => {
    console.log("Simulated delay...");
  }, 2000);
}


// ==============================
// Exercise 13: Debugging and Testing
// ==============================
function debugRegistration(data) {
  console.log("Starting registration");
  console.log(data);
  // Use breakpoints in Chrome DevTools here
  registerUserToAPI(data);
}


// ==============================
// Exercise 14: jQuery and JS Frameworks
// ==============================
// Include jQuery in HTML first:
// <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

$("#registerBtn").click(function () {
  alert("Register clicked");
});

$(".event-card").fadeOut().fadeIn();

// Benefit of moving to frameworks like React or Vue:
// They allow reusable components, better state handling, and make large applications scalable and easier to maintain.
